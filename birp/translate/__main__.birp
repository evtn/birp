из ..translated подключить translated как переводы
из ..argparser подключить аргпарсер
подключить os
из ..codegen_utils подключить БазовыйГенератор, получить_парсеры, загрузить, преобразовать

здесь = os.path.abspath(os.path.dirname(__файл__))
парсер, вычислительный_парсер = получить_парсеры(os.path.join(здесь, "birp.lark"))

класс Кодогенератор(БазовыйГенератор):
    вычислительный_парсер = вычислительный_парсер
    переводы = переводы


преобразователь = Кодогенератор()


объявить главный():
    аргументы = аргпарсер.parse_args()
    если аргументы.переводы:
        с открыть(аргументы.переводы) как файл:
            переводы_пользователя = загрузить(файл)
        переводы.обновить(переводы_пользователя)
    
    если аргументы.файлы:
        попробовать:
            подключить black как чёрный
        кроме ОшибкаПодключения:
            чёрный = Ничего

        для аргумент в аргументы.файлы:
            имя_ввода = аргумент
            с открыть(имя_ввода) как файл:
                код = файл.читать()
            имя_вывода = имя_ввода.заменить(".birp", ".py")
            результат, дерево = преобразовать(код, парсер, преобразователь, имя_ввода)
            если результат:
                если чёрный:
                    результат = чёрный.format_str(результат, mode=чёрный.Mode())
                если аргументы.дерево:
                    с открыть(имя_вывода + ".tree", "w") как файл:
                        файл.писать(дерево.приятный())
                с открыть(имя_вывода, "w") как файл:
                    файл.писать(результат)
                вывод(ф"{имя_ввода} -> {имя_вывода}")
            иначе:
                вывод(ф"{имя_ввода} невозможно преобразовать в {имя_вывода}")

    иначе:
        пока Да:
            вывод("Интерактивный Борп!")
            код = ввод(">>> ")
            результат, дерево = преобразовать(код, вычислительный_парсер, преобразователь, "<ввод>")
            вывод(ф"<<< {результат}")
            вывод(ф"= {представление(вычислить(результат))}")

если __имя__ == "__main__":
    main()