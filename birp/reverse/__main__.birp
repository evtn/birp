из ..translated подключить translated как переводы
из ..argparser подключить аргпарсер
подключить os
из ..codegen_utils подключить БазовыйГенератор, получить_парсеры, загрузить, преобразовать

здесь = os.path.abspath(os.path.dirname(__файл__))
парсер, вычислительный_парсер = получить_парсеры(os.path.join(здесь, "birp-rev.lark"))

переводы = {значение: ключ для ключ, значение в переводы.элементы()}

класс Кодогенератор(БазовыйГенератор):
    вычислительный_парсер = вычислительный_парсер
    переводы = переводы
    ключи = {
        "if": "если",
        "else": "иначе",
        "elif": "иначеесли",
        "while": "пока",
        "for": "для",
        "try": "попробовать",
        "except": "кроме",
        "finally": "финально",
        "from": "из",
        "in": "в",
        "import": "подключить",
        "as": "как",
        "pass": "пропустить",
        "continue": "продолжить",
        "break": "остановить",
        "return": "вернуть",
        "def": "объявить",
        "raise": "бросить",
        "assert": "убедиться",
        "class": "класс",
        "yield": "выдать",
        "await": "ожидать",
        "async": "асинхронно",
        "lambda": "лямбда",
        "None": "Ничего",
        "True": "Да",
        "False": "Нет",
        "and": "и",
        "or": "или",
        "not": "не",
        "is": "есть",
        "del": "удалить",
        "global": "глобально",
        "nonlocal": "нелокально",
        "with": "с",
        "orig_in": "in",
        "orig_is": "is",
        "orig_not": "not"
    }


преобразователь = Кодогенератор()


объявить главный():
    аргументы = аргпарсер.parse_args()
    если аргументы.переводы:
        с открыть(аргументы.переводы) как файл:
            переводы_пользователя = загрузить(файл)
        переводы.обновить(переводы_пользователя)
    
    если аргументы.файлы:
        для аргумент в аргументы.файлы:
            имя_ввода = аргумент
            с открыть(имя_ввода) как файл:
                код = файл.читать()
            имя_вывода = имя_ввода.заменить(".py", ".birp")
            результат, дерево = преобразовать(код, парсер, преобразователь, имя_ввода)
            если результат:
                если аргументы.дерево:
                    с открыть(имя_вывода + ".tree", "w") как файл:
                        файл.писать(дерево.приятный())
                с открыть(имя_вывода, "w") как файл:
                    файл.писать(результат)
                вывод(ф"{имя_ввода} -> {имя_вывода}")
            иначе:
                вывод(ф"{имя_ввода} невозможно преобразовать в {имя_вывода}")

    иначе:
        пока Да:
            вывод("Интерактивный Реверсивный Борп!")
            код = ввод(">>> ")
            результат = строка(преобразовать(код, вычислительный_парсер, преобразователь, "<ввод>"))
            вывод(ф"=> {результат}")
            вывод(ф"= {представление(вычислить(результат))}")

если __имя__ == "__main__":
    main()